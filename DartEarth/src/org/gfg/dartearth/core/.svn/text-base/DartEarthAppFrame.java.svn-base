package org.gfg.dartearth.core;

import gov.nasa.worldwind.Exportable;
import gov.nasa.worldwind.avlist.AVKey;
import gov.nasa.worldwind.geom.Angle;
import gov.nasa.worldwind.geom.LatLon;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.layers.Layer;
import gov.nasa.worldwind.layers.RenderableLayer;
import gov.nasa.worldwind.layers.TerrainProfileLayer;
import gov.nasa.worldwind.ogc.kml.KMLRoot;
import gov.nasa.worldwind.ogc.kml.impl.KMLController;
import gov.nasa.worldwind.util.layertree.KMLLayerTreeNode;
import gov.nasa.worldwind.util.layertree.KMLNetworkLinkTreeNode;
import gov.nasa.worldwind.util.measure.MeasureTool;
import gov.nasa.worldwind.view.orbit.BasicOrbitView;
import gov.nasa.worldwindx.examples.util.BalloonController;
import gov.nasa.worldwindx.examples.util.HotSpotController;

import java.awt.Frame;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JMenuBar;
import javax.swing.SwingUtilities;

import org.gfg.dartearth.feature.draw.PolygonLayer;
import org.gfg.dartearth.feature.goTo.GoToPanelDialog;
import org.gfg.dartearth.feature.layerpanel.LayerPanelDailog;
import org.gfg.dartearth.feature.layerpanel.LayerPanelDailog2;
import org.gfg.dartearth.feature.mainmenu.MainMenu;
import org.gfg.dartearth.feature.measure.Measurer;
import org.gfg.dartearth.layer.kml3d.Kml3DLayerBuilder;

/**
 * 最主要的窗口，就是用于显示DartEarth的窗口，从ApplicationTemplate.AppFrame继承而来。
 * 
 * @author 陈亮<br>
 *         E-mail:burningcl@gmail.com
 * 
 */
public class DartEarthAppFrame extends ApplicationTemplate.AppFrame {
	/**
	 * 默认的序列号
	 */
	private static final long serialVersionUID = 1662249201312879311L;

	private LayerPanelDailog layerPanelDialog = null;
	private LayerPanelDailog2 layerPanelDialog2 = null;
	private PropertiesDialog propertiesDialog = null;
	 GoToPanelDialog goToPanelDialog = null;
	private MeasureDialog measureDialog = null;
	private TerrainProfileLayer profile = null;
	private Measurer measurer = null;
	/////////////////////////////////////////
	private MetaDataSearchUI metaDataSearchDialog = null;
	private AlgorithmLibUI algorithmLibDialog = null;
	private DataSourceList dataSourceListDialog = null;


	
	/////////////////////////////////////////
	
	private boolean FULL_SCREEN = true;

	/**
	 * 构造方法，负责调用初始化函数
	 */
	public DartEarthAppFrame() {
		super(true, false, false);
		URL fileName = getClass().getResource("/img/1.png");
        this.setIconImage(new ImageIcon(fileName).getImage());
		if (FULL_SCREEN == true) {
			this.setExtendedState(Frame.MAXIMIZED_BOTH);
		}
		initial();
		// this.setFont(new Font("宋体",Font.PLAIN,14));
		// this.getWwd().addSelectListener(new BasicDragger(this.getWwd()));
	}

	/**
	 * 初始化入口函数。我想，这个就不用多说了吧。@_@
	 */
	public void initial() {
		
		initialTerrainProfiler();
		initalLayerPanelDialog();
		
		initalPropertiesDialog();
		initalGoToDialog();
		initialMainMenu();
		initialControllers();
		initialMeasureDialog();
		//	Model3DAnimatorLayerBuilder.build(this);
		////////zxb////添加一个面板用于滑动显示////
		initalLayerPanelDialog2();
		initalSearchDialog();
		initalAlgorithmDialog();
		initalDataSourceDialog();
		///////////////////////////////
		
		Kml3DLayerBuilder.buildDefaultLayer(this);

//		Model3DAnimatorController c = new Model3DAnimatorController(this);
//		c.start();
		// WmsDemlLayerImporter.importByFile(this,
		// "C:\\Users\\Jairus Chan\\Documents\\google_city.deml");
	}

	private void initalDataSourceDialog() {
		setDataSourceListDialog(new DataSourceList(this, false));
		
	}

	private void initalAlgorithmDialog() {
		 algorithmLibDialog = new AlgorithmLibUI(this,false);
	}

	private void initalSearchDialog() {
		 metaDataSearchDialog = new MetaDataSearchUI(this, false,this.getWwd());
	}

	/**
	 * 初始化Terrain信息面板，即地形信息面板
	 */
	private void initialTerrainProfiler() {
		profile = new TerrainProfileLayer();
		profile.setEventSource(getWwd());
		profile.setFollow(TerrainProfileLayer.FOLLOW_PATH);
		profile.setShowProfileLine(false);
		getWwd().getModel().getLayers().add(profile);
		// TerrainProfileBuilder.build(this);
	}

	/**
	 * 初始化所有Controller，包括 HotSpotController,BalloonController
	 */
	private void initialControllers() {
		new HotSpotController(this.getWwd());
		new BalloonController(this.getWwd());
	}

	/**
	 * 初始化主菜单
	 */
	private void initialMainMenu() {
		JMenuBar menuBar = MainMenu.createMainMenu(this);
		this.setJMenuBar(menuBar);
	}

	/**
	 * 初始化测量对话框
	 */
	private void initialMeasureDialog() {
		this.measureDialog = new MeasureDialog(this);
		measurer = new Measurer(getWwd(), this);
	}

	/**
	 * 初始化前往对话框
	 */
	private void initalGoToDialog() {
		goToPanelDialog = new GoToPanelDialog(this, "前往", this.getWwd());
	}

	/**
	 * 初始化图层对话框
	 * 
	 */
	private void initalLayerPanelDialog() {
		// 给LayerPanelDialog初始化，owner为当前的DartEarthAppFrame
		// System.out.println(this.getWwd());
		layerPanelDialog = new LayerPanelDailog(this, "图层", this.getWwd());

	}
	private void initalLayerPanelDialog2() {
		// 给LayerPanelDialog2初始化专门显示单选的图层
		// System.out.println(this.getWwd());
		layerPanelDialog2 = new LayerPanelDailog2(this, "图层选择", this.getWwd());
		
	}

	/**
	 * 初始化属性对话框
	 */
	private void initalPropertiesDialog() {
		// 给PropertiesDialog初始化，owner为当前的DartEarthAppFrame
		propertiesDialog = new PropertiesDialog(this, this.getWwd());
	}

	public LayerPanelDailog getLayerPanelDialog() {
		return layerPanelDialog;
	}

	public void setLayerPanelDialog(LayerPanelDailog layerPanelDialog) {
		this.layerPanelDialog = layerPanelDialog;
	}

	public GoToPanelDialog getGoToPanelDialog() {
		return goToPanelDialog;
	}

	public void setGoToPanelDialog(GoToPanelDialog goToPanelDialog) {
		this.goToPanelDialog = goToPanelDialog;
	}

	public PropertiesDialog getPropertiesDialog() {
		return propertiesDialog;
	}

	public void setPropertiesDialog(PropertiesDialog propertiesDialog) {
		this.propertiesDialog = propertiesDialog;
	}

	public MeasureDialog getMeasureDialog() {
		return measureDialog;
	}

	public void setMeasureDialog(MeasureDialog measureDialog) {
		this.measureDialog = measureDialog;
	}

	public Measurer getMeasurer() {
		return measurer;
	}

	public void setMeasurer(Measurer measurer) {
		this.measurer = measurer;
	}
	public MetaDataSearchUI getMetaDataSearchDialog() {
		return metaDataSearchDialog;
	}

	public void setMetaDataSearchDialog(MetaDataSearchUI metaDataSearchDialog) {
		this.metaDataSearchDialog = metaDataSearchDialog;
	}

	public AlgorithmLibUI getAlgorithmLibDialog() {
		return algorithmLibDialog;
	}

	public void setAlgorithmLibDialog(AlgorithmLibUI algorithmLibDialog) {
		this.algorithmLibDialog = algorithmLibDialog;
	}
	public List<Exportable> getExportElems() throws IOException {

		List<Exportable> list = new ArrayList<Exportable>();
		for (Layer layer : this.getWwd().getModel().getLayers()) {

			if (layer instanceof PolygonLayer) {
				list.add(((PolygonLayer) layer).getPolygon());
			}
		}

		return list;
	}

	public void setExportElems(List<Exportable> exportElems) {
	}

	/**
	 * Move the current view position
	 * 
	 * @param lat
	 *            the target latitude in decimal degrees
	 * @param lon
	 *            the target longitude in decimal degrees
	 */
	public void gotoLatLon(double lat, double lon) {
		this.gotoLatLon(lat, lon, Double.NaN, 0, 0);
	}

	/**
	 * Move the current view position, zoom, heading and pitch
	 * 
	 * @param lat
	 *            the target latitude in decimal degrees
	 * @param lon
	 *            the target longitude in decimal degrees
	 * @param zoom
	 *            the target eye distance in meters
	 * @param heading
	 *            the target heading in decimal degrees
	 * @param pitch
	 *            the target pitch in decimal degrees
	 */
	public void gotoLatLon(double lat, double lon, double zoom, double heading, double pitch) {
		BasicOrbitView view = (BasicOrbitView) this.getWwd().getView();
		if (!Double.isNaN(lat) || !Double.isNaN(lon) || !Double.isNaN(zoom)) {
			lat = Double.isNaN(lat) ? view.getCenterPosition().getLatitude().degrees : lat;
			lon = Double.isNaN(lon) ? view.getCenterPosition().getLongitude().degrees : lon;
			zoom = Double.isNaN(zoom) ? view.getZoom() : zoom;
			heading = Double.isNaN(heading) ? view.getHeading().degrees : heading;
			pitch = Double.isNaN(pitch) ? view.getPitch().degrees : pitch;
			view.addPanToAnimator(Position.fromDegrees(lat, lon, 0), Angle.fromDegrees(heading), Angle.fromDegrees(pitch), zoom, true);
		}
	}

	public void addKMLLayer(KMLRoot kmlRoot) {
		// Create a KMLController to adapt the KMLRoot to the World Wind
		// renderable interface.
		KMLController kmlController = new KMLController(kmlRoot);

		// Adds a new layer containing the KMLRoot to the end of the
		// WorldWindow's layer list. This
		// retrieves the layer name from the KMLRoot's DISPLAY_NAME field.
		RenderableLayer layer = new RenderableLayer();
		layer.setName((String) kmlRoot.getField(AVKey.DISPLAY_NAME));
		layer.addRenderable(kmlController);

		// Adds a new layer tree node for the KMLRoot to the on-screen layer
		// tree, and makes the new node visible
		// in the tree. This also expands any tree paths that represent open KML
		// containers or open KML network
		// links.
		KMLLayerTreeNode layerNode = new KMLLayerTreeNode(layer, kmlRoot);
		DartEarthAppFrame.this.getWwd().getModel().getLayers().add(0, layer);
		DartEarthAppFrame.this.getLayerPanelDialog().getLayerPanel().update();

		// Listens to refresh property change events from KML network link
		// nodes. Upon receiving such an event this
		// expands any tree paths that represent open KML containers. When a KML
		// network link refreshes, its tree
		// node replaces its children with new nodes created form the refreshed
		// content, then sends a refresh
		// property change event through the layer tree. By expanding open
		// containers after a network link refresh,
		// we ensure that the network link tree view appearance is consistent
		// with the KML specification.
		layerNode.addPropertyChangeListener(AVKey.RETRIEVAL_STATE_SUCCESSFUL, new PropertyChangeListener() {
			public void propertyChange(final PropertyChangeEvent event) {
				if (event.getSource() instanceof KMLNetworkLinkTreeNode) {
					// Manipulate the tree on the EDT.
					SwingUtilities.invokeLater(new Runnable() {
						public void run() {

							DartEarthAppFrame.this.getWwd().redraw();
						}
					});
				}
			}
		});
	}

	/**
	 * 更新地形信息，地形信息的显示依赖于测量(MeasureTool)。传入测量，根据测量来更新地形信息。
	 * 
	 * @param mt MeasureTool
	 */
	public void updateProfile(MeasureTool mt) {
		ArrayList<? extends LatLon> positions = mt.getPositions();
		if (positions != null && positions.size() > 1) {
			profile.setPathPositions(positions);
			profile.setEnabled(true);
		} else {
			profile.setEnabled(false);
		}
		getWwd().redraw();
	}

	/**
	 * 关闭地形信息的显示
	 */
	public void removeProfile() {
		// profile.setPathPositions(null);
		profile.setEnabled(false);
		getWwd().redraw();
	}

	public LayerPanelDailog2 getLayerPanelDialog2() {
		return layerPanelDialog2;
	}

	public void setLayerPanelDialog2(LayerPanelDailog2 layerPanelDialog2) {
		this.layerPanelDialog2 = layerPanelDialog2;
	}

	public DataSourceList getDataSourceListDialog() {
		return dataSourceListDialog;
	}

	public void setDataSourceListDialog(DataSourceList dataSourceListDialog) {
		this.dataSourceListDialog = dataSourceListDialog;
	}

}
